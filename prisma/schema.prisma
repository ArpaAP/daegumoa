// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  nickname     String?
  profileImgId Int?
  badgeId      Int?
  createdDate  DateTime @default(now())
  modifiedDate DateTime @updatedAt

  profileImg Image? @relation("ProfileImg", fields: [profileImgId], references: [id])
  badge      Badge? @relation("UserBadge", fields: [badgeId], references: [id])

  eventHolders   EventHolder[]
  missionHolders MissionHolder[]
  badgeHolders   BadgeHolder[]
}

model Event {
  id             Int             @id @default(autoincrement())
  addr1          String
  addr2          String?
  cat            String
  startDate      DateTime
  endDate        DateTime
  lat            Float
  lng            Float
  tel            String
  title          String
  tag            EventTag
  message        String?
  info           String?
  mainImg        String?
  thumbnailImg   String?
  createdDate    DateTime        @default(now())
  modifiedDate   DateTime        @updatedAt
  eventHolders   EventHolder[]
  missionHolders MissionHolder[]
  Mission        Mission[]       @relation("MissionEvent")
}

model Mission {
  id           Int        @id @default(autoincrement())
  title        String
  info         String
  difficulty   Difficulty
  tag          MissionTag
  startTime    DateTime
  endTime      DateTime
  missionImg   String
  eventId      Int
  createdDate  DateTime   @default(now())
  modifiedDate DateTime   @updatedAt

  events         Event           @relation("MissionEvent", fields: [eventId], references: [id])
  missionHolders MissionHolder[]
}

model Image {
  id             Int             @id @default(autoincrement())
  src            String
  alt            String
  createdDate    DateTime        @default(now())
  modifiedDate   DateTime        @updatedAt
  users          User[]          @relation("ProfileImg")
  missionHolders MissionHolder[]
}

model MissionHolder {
  id           Int           @id @default(autoincrement())
  status       MissionStatus
  userId       Int
  missionId    Int
  imageId      Int
  eventId      Int?
  createdDate  DateTime      @default(now())
  modifiedDate DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  mission Mission @relation(fields: [missionId], references: [id])
  image   Image   @relation(fields: [imageId], references: [id])
  event   Event?  @relation(fields: [eventId], references: [id])
}

model EventHolder {
  id           Int      @id @default(autoincrement())
  userId       Int
  eventId      Int
  createdDate  DateTime @default(now())
  modifiedDate DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model Badge {
  id           Int           @id @default(autoincrement())
  name         String
  info         String
  level        Int
  createdDate  DateTime      @default(now())
  modifiedDate DateTime      @updatedAt
  badgeHolders BadgeHolder[]
  users        User[]        @relation("UserBadge")
}

model BadgeHolder {
  id           Int      @id @default(autoincrement())
  badgeId      Int
  userId       Int
  createdDate  DateTime @default(now())
  modifiedDate DateTime @updatedAt

  badge Badge @relation(fields: [badgeId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

enum EventTag {
  MARKET
  FESTIVAL
  PERFORM
  ETC
}

enum MissionTag {
  MARKET
  FESTIVAL
  PERFORM
  ETC
}

enum Difficulty {
  EASY
  NORMAL
  HARD
}

enum MissionStatus {
  WAIT
  REJECT
  COMPLETE
}
